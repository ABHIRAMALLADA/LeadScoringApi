# lead_scoring_api.py
"""Lead Scoring API
===================
A FastAPI service that evaluates inbound B2B leads with an OpenAI LLM and returns:
    * score: 0–100 numeric likelihood to convert
    * category: Hot / Warm / Cold (derived)
    * explanation: one‑sentence rationale

Usage
-----
1.  Install dependencies (ideally in a virtual environment)::
        pip install fastapi uvicorn pydantic openai faker python-dotenv

2.  Set the environment variable ``OPENAI_API_KEY`` with a valid key.

3.  Run the server::
        uvicorn lead_scoring_api:app --reload

4.  Send a POST request to ``/score`` with a JSON body that matches the **Lead** model (see examples below).

5.  (Optional) Generate synthetic leads with ``python lead_scoring_api.py --generate 10`` to create sample I/O files.
"""
from __future__ import annotations

import json
import os
import re
import argparse
from typing import List, Optional

import openai # type: ignore
from fastapi import FastAPI, HTTPException # type: ignore
from pydantic import BaseModel, EmailStr, Field, validator # type: ignore
from faker import Faker # type: ignore

# ---------------------------------------------------------------------------
# Configuration
# ---------------------------------------------------------------------------

openai.api_key = os.getenv("OPENAI_API_KEY")

# ---------------------------------------------------------------------------
# Pydantic models
# ---------------------------------------------------------------------------

class Lead(BaseModel):
    """Schema for an inbound marketing or sales lead."""

    name: str = Field(..., example="Jane Doe")
    email: EmailStr = Field(..., example="jane.doe@example.com")
    company: str = Field(..., example="ExampleCorp Inc.")
    title: str = Field(..., example="Senior DevOps Engineer")
    inquiry_message: str = Field(..., example="Hi, I'd like to organise a demo for my team …")
    source_channel: str = Field(
        ..., examples=["Website Form", "LinkedIn", "Partner Referral", "Webinar Signup"]
    )
    industry: Optional[str] = Field(None, example="SaaS")
    engagement_behavior: Optional[str] = Field(
        None, examples=["Visited pricing page", "Opened 3 emails", "Downloaded whitepaper"]
    )

    # Basic sanity checks
    @validator("inquiry_message")
    def _msg_len(cls, v):  # noqa: D401,N802
        if len(v) < 8:
            raise ValueError("inquiry_message is suspiciously short")
        return v


class LeadScoreResponse(BaseModel):
    score: int = Field(..., ge=0, le=100)
    category: str = Field(..., regex="^(Hot|Warm|Cold)$")
    explanation: str


# ---------------------------------------------------------------------------
# FastAPI app
# ---------------------------------------------------------------------------

app = FastAPI(
    title="Spinabot Lead Scoring API",
    description="Evaluates lead quality, buying intent and ICP fit using an OpenAI LLM.",
    version="1.0.0",
)

SYSTEM_PROMPT = """
You are an expert sales-operations assistant. Your job is to triage new inbound B2B leads and
predict how likely they are to become paying customers for a developer-centric SaaS company.

Scoring rubric (0–100):
* 80–100 → Hot (ready to buy or strongly engaged)
* 60–79  → Warm (moderate intent / needs nurture)
* 0–59   → Cold (low intent or bad fit)

Consider, in order of weight:
1. Buying intent expressed in the inquiry_message (explicit ask for demo, pricing, PoC, etc.).
2. Company fit against an ideal customer profile (ICP) of mid-market software/tech companies
   with 50–500 employees.
3. Economic buyer or key influencer titles (VP Engineering, CTO, Head of DevOps, etc.).
4. Engagement behavior if available (pricing-page view > whitepaper download > email open).
5. Source channel quality (demo form > partner referral > webinar > cold email/lists).

Respond strictly in JSON like:
{
  "score": <int 0-100>,
  "category": "Hot|Warm|Cold",
  "explanation": "One concise sentence."
}
"""

CATEGORY_RULES = {
    range(80, 101): "Hot",
    range(60, 80): "Warm",
    range(0, 60): "Cold",
}

# ---------------------------------------------------------------------------
# Core scoring logic
# ---------------------------------------------------------------------------

def _llm_score(lead: Lead) -> LeadScoreResponse:  # noqa: D401,N802
    """Send the lead to the LLM and parse the JSON reply."""

    user_prompt = (
        "Lead data:\n"
        f"Name: {lead.name}\n"
        f"Email: {lead.email}\n"
        f"Company: {lead.company}\n"
        f"Title: {lead.title}\n"
        f"Industry: {lead.industry or 'N/A'}\n"
        f"Inquiry: {lead.inquiry_message}\n"
        f"Source: {lead.source_channel}\n"
        f"Engagement: {lead.engagement_behavior or 'N/A'}\n"
    )

    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        temperature=0.2,
        messages=[
            {"role": "system", "content": SYSTEM_PROMPT.strip()},
            {"role": "user", "content": user_prompt.strip()},
        ],
    )

    raw = response.choices[0].message.content  # type: ignore[index]
    match = re.search(r"{.*}", raw, re.S)
    if not match:
        raise ValueError(f"LLM returned unparsable content: {raw}")

    data = json.loads(match.group())
    return LeadScoreResponse(**data)


def _heuristic_fallback(lead: Lead) -> LeadScoreResponse:  # noqa: D401,N802
    """Deterministic fallback if the LLM is unavailable."""

    score = 0

    # Heuristic 1 – Buying intent keywords
    high_intent_kw = ["demo", "pricing", "proof of concept", "integrate", "trial"]
    if any(k in lead.inquiry_message.lower() for k in high_intent_kw):
        score += 50
    elif "question" in lead.inquiry_message.lower():
        score += 20

    # Heuristic 2 – Title seniority (simplified)
    senior_titles = ["cto", "vp", "head", "director", "lead"]
    if any(t in lead.title.lower() for t in senior_titles):
        score += 20
    else:
        score += 5

    # Heuristic 3 – Source channel weight
    channel_score = {
        "Website Form": 20,
        "LinkedIn": 15,
        "Partner Referral": 25,
        "Webinar Signup": 10,
    }.get(lead.source_channel, 5)
    score += channel_score

    score = min(score, 100)
    for rng, cat in CATEGORY_RULES.items():
        if score in rng:
            category = cat
            break
    else:  # pragma: no cover
        category = "Cold"

    explanation = "Heuristic fallback scoring due to LLM error."
    return LeadScoreResponse(score=score, category=category, explanation=explanation)


def score_lead(lead: Lead) -> LeadScoreResponse:  # noqa: D401,N802
    """Wrapper that prefers the LLM but falls back gracefully."""

    try:
        return _llm_score(lead)
    except Exception as exc:  # pylint: disable=broad-except
        print("[WARN] LLM failed – using heuristic fallback:", exc)
        return _heuristic_fallback(lead)


# ---------------------------------------------------------------------------
# FastAPI route
# ---------------------------------------------------------------------------

@app.post("/score", response_model=LeadScoreResponse)
async def score_endpoint(lead: Lead):  # noqa: D401,N802
    """HTTP endpoint that scores a lead."""
    try:
        return score_lead(lead)
    except HTTPException:
        raise
    except Exception as exc:  # pylint: disable=broad-except
        raise HTTPException(status_code=500, detail=str(exc)) from exc


# ---------------------------------------------------------------------------
# CLI helper to generate synthetic leads & demo output
# ---------------------------------------------------------------------------

def _generate_fake_leads(n: int = 5) -> List[Lead]:  # noqa: D401,N802
    faker = Faker()
    samples: List[Lead] = []
    for _ in range(n):
        samples.append(
            Lead(
                name=faker.name(),
                email=faker.email(),
                company=faker.company(),
                title=faker.job(),
                inquiry_message=faker.text(max_nb_chars=120),
                source_channel=faker.random_element(
                    elements=(
                        "Website Form",
                        "LinkedIn",
                        "Partner Referral",
                        "Webinar Signup",
                        "Cold Email",
                    )
                ),
                industry=faker.random_element(
                    elements=("SaaS", "FinTech", "E-commerce", "Healthcare", "Education")
                ),
                engagement_behavior=faker.random_element(
                    elements=(
                        "Visited pricing page",
                        "Opened 3 emails",
                        "Downloaded whitepaper",
                        None,
                    )
                ),
            )
        )
    return samples


def main() -> None:  # noqa: D401,N802
    parser = argparse.ArgumentParser(description="Lead Scoring Utility")
    parser.add_argument("--generate", type=int, metavar="N", help="generate N fake leads and score them")
    args = parser.parse_args()

    if args.generate:
        leads = _generate_fake_leads(args.generate)
        for lead in leads:
            scored = score_lead(lead)
            print(json.dumps({**lead.dict(), **scored.dict()}, ensure_ascii=False))


if __name__ == "__main__":
    main()
